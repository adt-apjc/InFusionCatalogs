{
   "name": "ANZ Lab (3.0.0)",
   "scripts": [
      {
         "name": "Transport",
         "description": "",
         "script": "# Autogenerated Transport code for HCO/Topogen version 5.3 \n\nimport sys,json\nsys.path.insert(1, './topogen')\nimport requests\nimport asyncio\nfrom nfdk.pojos.model import PortTypeEnum\nfrom nfdk.utils.brain_connection import BrainConnectionConfig, BrainConnection, set_stand_alone_mode\nfrom nfdk.utils.brain_rest_connector import BrainRestConnector\nfrom topology import TopoGen, TopogenOtnDevice, TopogenRoadm, TopogenRouter, TopoGenSite\nfrom constraints import Constraints, NodeConstraint\nfrom vendors import Vendors\n\nset_stand_alone_mode()\n\nSITES = [\n    TopoGenSite(name='MEL', location=(-37.81377 , 144.96236)),\n    TopoGenSite(name='SYD', location=(-33.8688197 , 151.2092955)),\n    TopoGenSite(name='BRI', location=(-27.4704528 , 153.0260341)),\n    TopoGenSite(name='ADE', location=(-34.92853 , 138.60167)),\n    TopoGenSite(name='WAG', location=(-35.09818 , 147.35377)),\n    TopoGenSite(name='PER', location=(-31.9523123 , 115.861309)),\n    TopoGenSite(name='DAR', location=(-12.4637333 , 130.8444446)),\n    TopoGenSite(name='ALI', location=(-23.698042 , 133.8807471)),\n    TopoGenSite(name='EDEN', location=(-37.0136574 , 149.9095179)),\n    TopoGenSite(name='BRO', location=(-31.9595859 , 141.4608138)),\n    TopoGenSite(name='MIL', location=(-34.2068859 , 142.1366852)),\n    TopoGenSite(name='DUB', location=(-32.2443908 , 148.614418)),\n    TopoGenSite(name='POR', location=(-32.4935661 , 137.7743496))\n]\n\nROADMS = [\n    TopogenRoadm(name='SD1MEL01', site='MEL', vendor=Vendors.CISCO_ONC),\n    TopogenRoadm(name='SD1SYD01', site='SYD', vendor=Vendors.CISCO_ONC),\n    TopogenRoadm(name='SD1BRI01', site='BRI', vendor=Vendors.CISCO_ONC),\n    TopogenRoadm(name='SD1WAG01', site='WAG', vendor=Vendors.CISCO_ONC),\n    TopogenRoadm(name='SD1EDEN01', site='EDEN', vendor=Vendors.CISCO_ONC),\n    TopogenRoadm(name='SD1SYD02', site='SYD', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1MEL02', site='MEL', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1ADE02', site='ADE', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1PER02', site='PER', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1DAR02', site='DAR', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1ALI02', site='ALI', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1BRO02', site='BRO', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1DUB02', site='DUB', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1WAG02', site='WAG', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1POR02', site='POR', vendor=Vendors.CIENA_MCP),\n    TopogenRoadm(name='SD1DUB01', site='DUB', vendor=Vendors.CISCO_ONC)\n]\n\n\nROUTERS = [\n    TopogenRouter(name='CR1.MEL', site='MEL', vendor=Vendors.CISCO_RON, is_core=True, is_zr=True,\n                  device_type='ASR 9904', device_family='ASR9K Series'),\n    TopogenRouter(name='CR2.MEL', site='MEL', vendor=Vendors.CISCO_RON, is_core=True, is_zr=True,\n                  device_type='ASR 9904', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.MEL', site='MEL', vendor=Vendors.CISCO, is_core=False, is_zr=False,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='CR1.SYD', site='SYD', vendor=Vendors.CISCO_RON, is_core=True, is_zr=True,\n                  device_type='ASR 9904', device_family='ASR9K Series'),\n    TopogenRouter(name='CR2.SYD', site='SYD', vendor=Vendors.CISCO_RON, is_core=True, is_zr=True,\n                  device_type='ASR 9904', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.SYD', site='SYD', vendor=Vendors.CISCO, is_core=False, is_zr=False,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='CR1.BRI', site='BRI', vendor=Vendors.CISCO_RON, is_core=True, is_zr=True,\n                  device_type='ASR 9904', device_family='ASR9K Series'),\n    TopogenRouter(name='CR2.BRI', site='BRI', vendor=Vendors.CISCO_RON, is_core=True, is_zr=True,\n                  device_type='ASR 9904', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.BRI', site='BRI', vendor=Vendors.CISCO, is_core=False, is_zr=False,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='CR1.ADE', site='ADE', vendor=Vendors.CISCO_RON, is_core=True, is_zr=True,\n                  device_type='NCS-5502-SE', device_family='NCS-5500 Series'),\n    TopogenRouter(name='ER1.ADE', site='ADE', vendor=Vendors.CISCO_RON, is_core=False, is_zr=True,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='CR1.PER', site='PER', vendor=Vendors.CISCO, is_core=True, is_zr=False,\n                  device_type='NCS-5502-SE', device_family='NCS-5500 Series'),\n    TopogenRouter(name='ER1.PER', site='PER', vendor=Vendors.HUAWEI, is_core=False, is_zr=False,\n                  device_type='NE40E-X3', device_family='NE40E'),\n    TopogenRouter(name='CR1.DAR', site='DAR', vendor=Vendors.CISCO, is_core=True, is_zr=False,\n                  device_type='NCS-5502-SE', device_family='NCS-5500 Series'),\n    TopogenRouter(name='ER1.DAR', site='DAR', vendor=Vendors.JUNIPER, is_core=False, is_zr=False,\n                  device_type='MX960', device_family='MX960'),\n    TopogenRouter(name='CR2.ADE', site='ADE', vendor=Vendors.CISCO, is_core=True, is_zr=False,\n                  device_type='NCS-5502-SE', device_family='NCS-5500 Series')\n]\n\n\nasync def simulationTest(BRAIN_CONFIG):\n    try:\n        brain_connection = BrainConnection(config=BRAIN_CONFIG)\n        stream_id = await BrainRestConnector(brain_connection=brain_connection).get_stream_id(stream_name='Topogen')\n        print(f\"stream_id = {stream_id}\")\n        topo_gen = TopoGen(\n            stream_id=stream_id,\n            num_days_to_generate_back=0,\n            num_days_to_generate_forward=0\n        )\n\n        print(f'Creating sites and devices...')\n        topo_gen.add_sites(SITES)\n        topo_gen.add_roadms(ROADMS)\n        topo_gen.add_routers(filter(lambda r:not r.is_zr,ROUTERS))\n        topo_gen.add_zr_routers(filter(lambda r:r.is_zr,ROUTERS))\n\n        print(f'Creating topologies...')\n\n        # Create WDM topologies\n        topo_wdm_cisco = topo_gen.add_topology('topo_wdm_cisco', TopoGen.TopologyTypeEnum.DWDM)\n        topo_wdm_cisco.add_link('SD1MEL01', 'SD1SYD01')\n        topo_wdm_cisco.add_link('SD1MEL01', 'SD1WAG01')\n        topo_wdm_cisco.add_link('SD1MEL01', 'SD1EDEN01')\n        topo_wdm_cisco.add_link('SD1SYD01', 'SD1BRI01')\n        topo_wdm_cisco.add_link('SD1SYD01', 'SD1WAG01')\n        topo_wdm_cisco.add_link('SD1SYD01', 'SD1EDEN01')\n        topo_wdm_cisco.add_link('SD1SYD01', 'SD1DUB01')\n        topo_wdm_cisco.add_link('SD1DUB01', 'SD1WAG01')\n        topo_wdm_cisco.add_link('SD1DUB01', 'SD1BRI01')\n        topo_wdm_ciena = topo_gen.add_topology('topo_wdm_ciena', TopoGen.TopologyTypeEnum.DWDM)\n        topo_wdm_ciena.add_link('SD1MEL02', 'SD1ADE02')\n        topo_wdm_ciena.add_link('SD1PER02', 'SD1POR02')\n        topo_wdm_ciena.add_link('SD1PER02', 'SD1ALI02')\n        topo_wdm_ciena.add_link('SD1DAR02', 'SD1ALI02')\n        topo_wdm_ciena.add_link('SD1ALI02', 'SD1ADE02')\n        topo_wdm_ciena.add_link('SD1ADE02', 'SD1POR02')\n        topo_wdm_ciena.add_link('SD1BRO02', 'SD1DUB02')\n        topo_wdm_ciena.add_link('SD1SYD02', 'SD1DUB02')\n        topo_wdm_ciena.add_link('SD1MEL02', 'SD1BRO02')\n        topo_wdm_ciena.add_link('SD1WAG02', 'SD1BRO02')\n        topo_wdm_ciena.add_link('SD1SYD02', 'SD1WAG02')\n        topo_wdm_ciena.add_link('SD1WAG02', 'SD1DUB02')\n        topo_wdm_ciena.add_link('SD1POR02', 'SD1BRO02')\n        topo_wdm_ciena.add_link('SD1MEL01', 'SD1MEL02')\n\n        # Create OTN topologies\n        # NO OTN topologies\n\n        # Create IP topologies\n        topo_core_ZRP = topo_gen.add_topology('topo_core_ZRP', TopoGen.TopologyTypeEnum.ZRP) \n        topo_core_ZRP.add_link('CR1.MEL', 'CR1.SYD', path_topologies=[topo_wdm_cisco], bw_gbps=400 \n            ,constraints=Constraints(includes=[NodeConstraint('SD1WAG01')]) )\n        topo_core_ZRP.add_link('CR2.MEL', 'CR2.SYD', path_topologies=[topo_wdm_cisco], bw_gbps=400 \n            ,constraints=Constraints(includes=[NodeConstraint('SD1EDEN01')], excludes=[NodeConstraint('SD1WAG01')]) )\n        topo_core_ZRP.add_link('CR1.MEL', 'CR2.MEL', path_topologies=[topo_wdm_cisco], bw_gbps=400 )\n        topo_core_ZRP.add_link('CR1.MEL', 'CR1.BRI', path_topologies=[topo_wdm_cisco], bw_gbps=400 )\n        topo_core_ZRP.add_link('CR1.SYD', 'CR2.SYD', path_topologies=[topo_wdm_cisco], bw_gbps=400 )\n        topo_core_ZRP.add_link('CR1.SYD', 'CR1.BRI', path_topologies=[topo_wdm_cisco], bw_gbps=400 )\n        topo_core_ZRP.add_link('CR2.SYD', 'CR2.BRI', path_topologies=[topo_wdm_cisco], bw_gbps=400 \n            ,constraints=Constraints(includes=[NodeConstraint('SD1DUB01')]) )\n        topo_core_regional = topo_gen.add_topology('topo_core_regional', TopoGen.TopologyTypeEnum.IP) \n        topo_core_regional.add_link('CR1.MEL', 'CR1.ADE', path_topologies=[topo_wdm_ciena], bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n        topo_core_regional.add_link('CR1.ADE', 'CR1.PER', path_topologies=[topo_wdm_ciena], bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n        topo_core_regional.add_link('CR1.ADE', 'CR1.DAR', path_topologies=[topo_wdm_ciena], bw_gbps=100 )\n        topo_core_regional.add_link('CR1.PER', 'CR1.DAR', path_topologies=[topo_wdm_ciena], bw_gbps=100 )\n        topo_core_regional.add_link('CR1.ADE', 'CR1.SYD', path_topologies=[topo_wdm_ciena], bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n        topo_core_regional.add_link('CR2.MEL', 'CR2.ADE', path_topologies=[topo_wdm_ciena], bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 \n            ,constraints=Constraints(includes=[NodeConstraint('SD1BRO02')]) )\n        topo_core_regional.add_link('CR1.ADE', 'CR2.ADE', bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n        topo_access = topo_gen.add_topology('topo_access', TopoGen.TopologyTypeEnum.IP) \n        topo_access.add_link('ER1.MEL', 'CR1.MEL', bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n        topo_access.add_link('ER1.SYD', 'CR1.SYD', bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n        topo_access.add_link('ER1.BRI', 'CR1.BRI', bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n        topo_access.add_link('ER1.ADE', 'CR1.ADE', bw_gbps=100 )\n        topo_access.add_link('ER1.PER', 'CR1.PER', bw_gbps=100 )\n        topo_access.add_link('ER1.DAR', 'CR1.DAR', bw_gbps=100 )\n        topo_access.add_link('ER1.MEL', 'CR2.MEL', bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n        topo_access.add_link('ER1.SYD', 'CR2.SYD', bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n        topo_access.add_link('ER1.BRI', 'CR2.BRI', bw_gbps=200, is_lag=True, num_of_underlying_paths=2, underlying_path_bw_gbps=100 )\n\n        # Create LSP topologies\n        # NO LSP topologies\n\n        print(f'Creating SRLGs...')\n        srlg_topo_wdm_cisco = topo_gen.add_topology('srlg_topo_wdm_cisco', TopoGen.TopologyTypeEnum.SRLG)\n        srlg_topo_wdm_cisco.set_optic_topo(topo_wdm_cisco)\n        srlg_topo_wdm_ciena = topo_gen.add_topology('srlg_topo_wdm_ciena', TopoGen.TopologyTypeEnum.SRLG)\n        srlg_topo_wdm_ciena.set_optic_topo(topo_wdm_ciena)\n\n\n        print(f'Pushing TopoGen data to model...')\n        await topo_gen.export_to_brain(BRAIN_CONFIG)\n        print(f'done.')\n    except Exception as e:\n        print(str(e))\n    finally:\n        await brain_connection.close()\n\ndef reindex_hco(host,port,username=\"admin\",password=\"admin\"):\n    url = f'https://{host}:{port}/api/v2/search'\n    response = requests.post(url, data={}, auth=(username,password), verify=False)\n    print(response)\n\ndef is_hco_reachable(host,port,username=\"admin\",password=\"admin\"):\n    url = f'https://{host}:{port}/api/v2/search'\n    try:\n        response = requests.get(url, auth=(username,password), verify=False, timeout=10)\n        return response.status_code == 400 # expect httpcode 400 BAD REQUEST response\n    except requests.exceptions.Timeout:\n        print (\"Connection timeout\")\n        return False\n    except:\n        return False\n\ndef set_hco_map_parameters(host,port,username=\"admin\",password=\"admin\"):\n    print(\"### configuring HCO map parameters\")\n    settings = {\n        \"eastbound.3d.initial_lng_lat\": {\"lat\":-32,\"lng\":146},\n        \"eastbound.3d.initial_zoom\": None,\n        \"eastbound.3d.max_zoom\": 20,\n        \"eastbound.3d.min_zoom\": 4,\n        \"eastbound.3d.enable_otn\": False\n    }\n    for endpoint in settings.keys():\n        url = f'https://{host}:{port}/api/v2/config/properties/{endpoint}'\n        response = requests.put(url, auth=(username,password), verify=False, timeout=10, data=json.dumps(settings[endpoint]))\n        if (response.status_code == 200):\n            print(f'set {endpoint} to {json.dumps(settings[endpoint])}')\n\nif __name__ == '__main__':\n    HOST = sys.argv[1]\n    PORT = sys.argv[4] or 443\n    USERNAME = sys.argv[2]\n    PASSWORD = sys.argv[3]\n    # disable SSL self sign certificate warning\n    requests.packages.urllib3.disable_warnings()\n    if not is_hco_reachable(HOST,PORT,USERNAME,PASSWORD):\n        print(f'Cannot connect to HCO with the credential provided [{HOST}:{PORT},{USERNAME},{PASSWORD}]')\n        exit()\n    set_hco_map_parameters(HOST,PORT,USERNAME,PASSWORD)\n    # *** Use this BRAIN_CONFIG when passing HCO IP/user/password as arguments ***\n    BRAIN_CONFIG = BrainConnectionConfig(host=HOST, port=PORT, secured_connection=True,\n    verify_ssl=False, username=USERNAME, password=PASSWORD, timeout_secs=1200)\n\n    loop = asyncio.new_event_loop()\n    loop.run_until_complete(simulationTest(BRAIN_CONFIG))\n    loop.close()\n    print('Re-indexing HCO search index')\n    reindex_hco(HOST,PORT,USERNAME,PASSWORD)\n    print('done.')\n"
      },
      {
         "name": "srv1_RSVP_L3VPN",
         "description": "",
         "script": "# Autogenerated Service code for HCO/Topogen version 5.3 \n# This code generates services on top of an existing transport model, remember to execute the transport first.\n\nimport sys,json\nsys.path.insert(1, './topogen')\nimport requests\nimport asyncio\n\nfrom nfdk.utils.brain_connection import BrainConnectionConfig, set_stand_alone_mode\nfrom model_add_services_utils import add_services, remove_services, TopogenTunnelTypeEnum, TopogenServiceTypeEnum\nfrom services_datatypes import *\nfrom vendors import Vendors\nfrom constraints import Constraints, NodeConstraint\nfrom topology import TopogenRouter\n\nset_stand_alone_mode()\nROUTERS = [\n    TopogenRouter(name='ER1.MEL', site='MEL', vendor=Vendors.CISCO, is_core=False, is_zr=False,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.SYD', site='SYD', vendor=Vendors.CISCO, is_core=False, is_zr=False,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.BRI', site='BRI', vendor=Vendors.CISCO, is_core=False, is_zr=False,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.ADE', site='ADE', vendor=Vendors.CISCO_RON, is_core=False, is_zr=True,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.PER', site='PER', vendor=Vendors.HUAWEI, is_core=False, is_zr=False,\n                  device_type='NE40E-X3', device_family='NE40E'),\n    TopogenRouter(name='ER1.DAR', site='DAR', vendor=Vendors.JUNIPER, is_core=False, is_zr=False,\n                  device_type='MX960', device_family='MX960')\n]\n\ndef rsvp_te_fullmesh_generator(name, customer, cust_detail, bandwidth_reservation_mbps, setup_priority, holding_priority,  desc, isProtected):\n    for src in ROUTERS:\n        for dst in ROUTERS:\n            if src.name != dst.name:\n                yield TopogenRsvpTunnel(\n                    name=f'{name}_{src.name}-{dst.name}', desc=desc, tunnel_endpoints=[src.name, dst.name],\n                    customer_name=customer, customer_details=cust_detail,\n                    bandwidth_reservation_mbps=bandwidth_reservation_mbps,\n                    virtual_network=None,\n                    setup_priority=setup_priority,\n                    holding_priority=holding_priority,\n                    tunnel_type=TopogenTunnelTypeEnum.RSVP,\n                    main_path_settings=TopogenPathComputationSettings(\n                        path_optimization=TopogenPathOptimizationEnum.NUMBER_OF_HOPS,\n                        constraints=Constraints()\n                    ),\n                    protection_path_settings=TopogenProtectionSettings(\n                        backup_path_computation_settings=TopogenPathComputationSettings(\n                            path_optimization=TopogenPathOptimizationEnum.NUMBER_OF_HOPS,\n                            constraints=Constraints()\n                        )\n                    ) if isProtected else None,\n                    extra=None,\n                    )\n\n\ndef services():\n    kwargs = dict()\n    tunnels = {\n        TopogenTunnelTypeEnum.RSVP: [\n            rsvpTunnel for rsvpTunnel in rsvp_te_fullmesh_generator(\n                name=\"RSVP\", customer=\"Sony\", cust_detail=\"ADT Ltd.\",\n                bandwidth_reservation_mbps=10,\n                setup_priority=7,\n                holding_priority=0,\n                desc=\"\", isProtected=False,\n            )\n        ],\n        TopogenTunnelTypeEnum.SR: []\n    }\n    l3_vpn = [\n        TopogenL3VPNService(\n            name='Pepsi',\n            customer_name='Sony',\n            customer_details='ADT Ltd.',\n            route_distinguisher=65001,\n            route_target=66001,\n            service_topology=TopogenServiceTopologyEnum.ANY_TO_ANY,\n            tunnel_type=TopogenL3VPNTunnelType.RSVP_TE,\n            endpoints=[\n                TopogenEndpoint(\n                    device_name=\"ER1.MEL\",\n                    role=TopogenL3VPNEndpointRoleEnum.ANY_TO_ANY,\n                    vlan_id=1000,\n                    ip_address=\"10.10.10.1/24\"\n                ),\n                TopogenEndpoint(\n                    device_name=\"ER1.SYD\",\n                    role=TopogenL3VPNEndpointRoleEnum.ANY_TO_ANY,\n                    vlan_id=1001,\n                    ip_address=\"10.10.20.1/24\"\n                ),\n                TopogenEndpoint(\n                    device_name=\"ER1.BRI\",\n                    role=TopogenL3VPNEndpointRoleEnum.ANY_TO_ANY,\n                    vlan_id=1002,\n                    ip_address=\"10.10.30.1/24\"\n                )\n            ],\n            domains=[\n                TopogenServiceDomain(\n                    name='Cisco traditional',\n                    domain_type=TopogenDomainTypeEnum.ROUTER,\n                    nni_devices=[],\n                    rule='',\n                )\n            ]\n        )\n    ]\n\n    kwargs[TopogenServiceTypeEnum.TUNNEL.name] = tunnels\n    kwargs[TopogenServiceTypeEnum.L3_VPN.name] = l3_vpn\n\n    asyncio.get_event_loop().run_until_complete(\n        add_services(\n            brain_config=BRAIN_CONFIG,\n            services_types=[TopogenServiceTypeEnum.TUNNEL,TopogenServiceTypeEnum.L3_VPN],\n            **kwargs\n        )\n    )\n\ndef reindex_hco(host,port,username=\"admin\",password=\"admin\"):\n    url = f'https://{host}:{port}/api/v2/search'\n    response = requests.post(url, data={}, auth=(username,password), verify=False)\n    print(response)\n\ndef is_hco_reachable(host,port,username=\"admin\",password=\"admin\"):\n    url = f'https://{host}:{port}/api/v2/search'\n    try:\n        response = requests.get(url, auth=(username,password), verify=False, timeout=10)\n        return response.status_code == 400 # expect httpcode 400 BAD REQUEST response\n    except requests.exceptions.Timeout:\n        print (\"Connection timeout\")\n        return False\n    except:\n        return False\n\ndef set_hco_map_parameters(host,port,username=\"admin\",password=\"admin\"):\n    print(\"### configuring HCO map parameters\")\n    settings = {\n        \"eastbound.3d.initial_lng_lat\": {\"lat\":-32,\"lng\":146},\n        \"eastbound.3d.initial_zoom\": None,\n        \"eastbound.3d.max_zoom\": 20,\n        \"eastbound.3d.min_zoom\": 4,\n        ## SETTINGS REQUIRED FOR L3VPN\n        \"persistor.logical.enabled\": False,\n        \"persistor.logical.purge_down_links\": False,\n        \"persistor.logical.purge_period\": {\"enabled\": False, \"interval\": \"PT1H\", \"delay_from_start\": \"PT1H\"},\n        \"persistor.igp.purge_down_links_older_than\": \"P365D\",\n        \"persistor.igp.purge_period\": {\"enabled\": False, \"interval\": \"PT1H\", \"delay_from_start\": \"PT1H\"},\n        \"persistor.l3vpn.underlying_paths_lsp_enabled\": False,\n        \"persistor.l3vpn.underlying_paths_igp_enabled\": False,\n        \"eastbound.3d.enable_otn\": False\n    }\n    for endpoint in settings.keys():\n        url = f'https://{host}:{port}/api/v2/config/properties/{endpoint}'\n        response = requests.put(url, auth=(username,password), verify=False, timeout=10, data=json.dumps(settings[endpoint]))\n        if (response.status_code == 200):\n            print(f'set {endpoint} to {json.dumps(settings[endpoint])}')\n\nif __name__ == '__main__':\n    HOST = sys.argv[1]\n    PORT = sys.argv[4] or 443\n    USERNAME = sys.argv[2]\n    PASSWORD = sys.argv[3]\n    # disable SSL self sign certificate warning\n    requests.packages.urllib3.disable_warnings()\n    if not is_hco_reachable(HOST,PORT,USERNAME,PASSWORD):\n        print(f'Cannot connect to HCO with the credential provided [{HOST}:{PORT},{USERNAME},{PASSWORD}]')\n        exit()\n    set_hco_map_parameters(HOST,PORT,USERNAME,PASSWORD)\n    # *** Use this BRAIN_CONFIG when passing HCO IP/user/password as arguments ***\n    BRAIN_CONFIG = BrainConnectionConfig(host=HOST, port=PORT, secured_connection=True, \n                        verify_ssl=False, username=USERNAME, password=PASSWORD, timeout_secs=1200)\n    services()\n    print('Re-indexing HCO search index')\n    reindex_hco(HOST,PORT,USERNAME,PASSWORD)\n    print('done.')\n"
      },
      {
         "name": "SRV2_SRTE_L3VPN",
         "description": "",
         "script": "# Autogenerated Service code for HCO/Topogen version 5.3 \n# This code generates services on top of an existing transport model, remember to execute the transport first.\n\nimport sys,json\nsys.path.insert(1, './topogen')\nimport requests\nimport asyncio\n\nfrom nfdk.utils.brain_connection import BrainConnectionConfig, set_stand_alone_mode\nfrom model_add_services_utils import add_services, remove_services, TopogenTunnelTypeEnum, TopogenServiceTypeEnum\nfrom services_datatypes import *\nfrom vendors import Vendors\nfrom constraints import Constraints, NodeConstraint\nfrom topology import TopogenRouter\n\nset_stand_alone_mode()\nROUTERS = [\n    TopogenRouter(name='ER1.MEL', site='MEL', vendor=Vendors.CISCO, is_core=False, is_zr=False,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.SYD', site='SYD', vendor=Vendors.CISCO, is_core=False, is_zr=False,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.BRI', site='BRI', vendor=Vendors.CISCO, is_core=False, is_zr=False,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.ADE', site='ADE', vendor=Vendors.CISCO_RON, is_core=False, is_zr=True,\n                  device_type='ASR 9010', device_family='ASR9K Series'),\n    TopogenRouter(name='ER1.PER', site='PER', vendor=Vendors.HUAWEI, is_core=False, is_zr=False,\n                  device_type='NE40E-X3', device_family='NE40E'),\n    TopogenRouter(name='ER1.DAR', site='DAR', vendor=Vendors.JUNIPER, is_core=False, is_zr=False,\n                  device_type='MX960', device_family='MX960')\n]\n\n\ndef sr_fullmesh_generator(name, customer, cust_detail, bsid_seed, color_seed, desc, isProtected):\n    counter = 0\n    for src in ROUTERS:\n        for dst in ROUTERS:\n            if src.name != dst.name:\n                yield TopogenSrPolicy(\n                    name=f'{name}_{src.name}-{dst.name}', desc=desc, tunnel_endpoints=[src.name, dst.name],\n                    binding_sid=bsid_seed+counter ,color=color_seed+counter,\n                    customer_name=customer, customer_details=cust_detail,\n                    tunnel_type=TopogenTunnelTypeEnum.SR,\n                    main_path_settings=TopogenPathComputationSettings(\n                        path_optimization=TopogenPathOptimizationEnum.NUMBER_OF_HOPS,\n                        constraints=Constraints()\n                    ),\n                    protection_path_settings=TopogenProtectionSettings(\n                        backup_path_computation_settings=TopogenPathComputationSettings(\n                            path_optimization=TopogenPathOptimizationEnum.NUMBER_OF_HOPS,\n                            constraints=Constraints()\n                        )\n                    ) if isProtected else None ,\n                    extra=None,\n                    )\n                counter += 1\n\ndef services():\n    kwargs = dict()\n    tunnels = {\n        TopogenTunnelTypeEnum.RSVP: [],\n        TopogenTunnelTypeEnum.SR: [\n            srPolicy for srPolicy in sr_fullmesh_generator(\n                name=\"SRTE_mesh\", customer=\"ADT Ltd.\", cust_detail=\"Agile Development Team - APJC\",\n                bsid_seed=24001, color_seed=1000,\n                desc=\"Min IGP path policy\", isProtected=False,\n            )\n        ] + [\n            TopogenSrPolicy(\n                name='SR Policy 1 BRI to MEL',\n                desc='Min IGP path policy',\n                customer_name='ADT Ltd.',\n                customer_details='Agile Development Team - APJC',\n                tunnel_endpoints=['CR1.BRI', 'CR1.MEL'],\n                tunnel_type=TopogenTunnelTypeEnum.SR,\n                binding_sid=25101,\n                color=20000,\n                main_path_settings=TopogenPathComputationSettings(\n                    path_optimization=TopogenPathOptimizationEnum.NUMBER_OF_HOPS,\n                    constraints=Constraints(\n                        includes=[NodeConstraint('CR1.SYD')],\n                        excludes=[]\n                    )\n                ),\n                protection_path_settings=None,\n                extra=None,\n                ),\n            TopogenSrPolicy(\n                name='SR Policy 1 MEL to BRI',\n                desc='Min IGP path policy',\n                customer_name='ADT Ltd.',\n                customer_details='Agile Development Team - APJC',\n                tunnel_endpoints=['CR1.MEL', 'CR1.BRI'],\n                tunnel_type=TopogenTunnelTypeEnum.SR,\n                binding_sid=25101,\n                color=20000,\n                main_path_settings=TopogenPathComputationSettings(\n                    path_optimization=TopogenPathOptimizationEnum.NUMBER_OF_HOPS,\n                    constraints=Constraints(\n                        includes=[NodeConstraint('CR1.SYD')],\n                        excludes=[]\n                    )\n                ),\n                protection_path_settings=None,\n                extra=None,\n                )\n        ]\n    }\n    l3_vpn = [\n        TopogenL3VPNService(\n            name='Cola',\n            customer_name='Cola',\n            customer_details='ADT Ltd.',\n            route_distinguisher=65002,\n            route_target=66002,\n            service_topology=TopogenServiceTopologyEnum.ANY_TO_ANY,\n            tunnel_type=TopogenL3VPNTunnelType.SEGMENT_ROUTING,\n            endpoints=[\n                TopogenEndpoint(\n                    device_name=\"ER1.MEL\",\n                    role=TopogenL3VPNEndpointRoleEnum.ANY_TO_ANY,\n                    vlan_id=2000,\n                    ip_address=\"10.20.10.1/24\"\n                ),\n                TopogenEndpoint(\n                    device_name=\"ER1.BRI\",\n                    role=TopogenL3VPNEndpointRoleEnum.ANY_TO_ANY,\n                    vlan_id=2001,\n                    ip_address=\"10.20.20.1/24\"\n                ),\n                TopogenEndpoint(\n                    device_name=\"ER1.PER\",\n                    role=TopogenL3VPNEndpointRoleEnum.ANY_TO_ANY,\n                    vlan_id=2002,\n                    ip_address=\"10.20.30.1/24\"\n                ),\n                TopogenEndpoint(\n                    device_name=\"ER1.DAR\",\n                    role=TopogenL3VPNEndpointRoleEnum.ANY_TO_ANY,\n                    vlan_id=2003,\n                    ip_address=\"10.20.40.1/24\"\n                )\n            ],\n            domains=[\n                TopogenServiceDomain(\n                    name='Cisco traditional',\n                    domain_type=TopogenDomainTypeEnum.ROUTER,\n                    nni_devices=[],\n                    rule='',\n                )\n            ]\n        )\n    ]\n\n    kwargs[TopogenServiceTypeEnum.TUNNEL.name] = tunnels\n    kwargs[TopogenServiceTypeEnum.L3_VPN.name] = l3_vpn\n\n    asyncio.get_event_loop().run_until_complete(\n        add_services(\n            brain_config=BRAIN_CONFIG,\n            services_types=[TopogenServiceTypeEnum.TUNNEL,TopogenServiceTypeEnum.L3_VPN],\n            **kwargs\n        )\n    )\n\ndef reindex_hco(host,port,username=\"admin\",password=\"admin\"):\n    url = f'https://{host}:{port}/api/v2/search'\n    response = requests.post(url, data={}, auth=(username,password), verify=False)\n    print(response)\n\ndef is_hco_reachable(host,port,username=\"admin\",password=\"admin\"):\n    url = f'https://{host}:{port}/api/v2/search'\n    try:\n        response = requests.get(url, auth=(username,password), verify=False, timeout=10)\n        return response.status_code == 400 # expect httpcode 400 BAD REQUEST response\n    except requests.exceptions.Timeout:\n        print (\"Connection timeout\")\n        return False\n    except:\n        return False\n\ndef set_hco_map_parameters(host,port,username=\"admin\",password=\"admin\"):\n    print(\"### configuring HCO map parameters\")\n    settings = {\n        \"eastbound.3d.initial_lng_lat\": {\"lat\":-32,\"lng\":146},\n        \"eastbound.3d.initial_zoom\": None,\n        \"eastbound.3d.max_zoom\": 20,\n        \"eastbound.3d.min_zoom\": 4,\n        ## SETTINGS REQUIRED FOR L3VPN\n        \"persistor.logical.enabled\": False,\n        \"persistor.logical.purge_down_links\": False,\n        \"persistor.logical.purge_period\": {\"enabled\": False, \"interval\": \"PT1H\", \"delay_from_start\": \"PT1H\"},\n        \"persistor.igp.purge_down_links_older_than\": \"P365D\",\n        \"persistor.igp.purge_period\": {\"enabled\": False, \"interval\": \"PT1H\", \"delay_from_start\": \"PT1H\"},\n        \"persistor.l3vpn.underlying_paths_lsp_enabled\": False,\n        \"persistor.l3vpn.underlying_paths_igp_enabled\": False,\n        \"eastbound.3d.enable_otn\": False\n    }\n    for endpoint in settings.keys():\n        url = f'https://{host}:{port}/api/v2/config/properties/{endpoint}'\n        response = requests.put(url, auth=(username,password), verify=False, timeout=10, data=json.dumps(settings[endpoint]))\n        if (response.status_code == 200):\n            print(f'set {endpoint} to {json.dumps(settings[endpoint])}')\n\nif __name__ == '__main__':\n    HOST = sys.argv[1]\n    PORT = sys.argv[4] or 443\n    USERNAME = sys.argv[2]\n    PASSWORD = sys.argv[3]\n    # disable SSL self sign certificate warning\n    requests.packages.urllib3.disable_warnings()\n    if not is_hco_reachable(HOST,PORT,USERNAME,PASSWORD):\n        print(f'Cannot connect to HCO with the credential provided [{HOST}:{PORT},{USERNAME},{PASSWORD}]')\n        exit()\n    set_hco_map_parameters(HOST,PORT,USERNAME,PASSWORD)\n    # *** Use this BRAIN_CONFIG when passing HCO IP/user/password as arguments ***\n    BRAIN_CONFIG = BrainConnectionConfig(host=HOST, port=PORT, secured_connection=True, \n                        verify_ssl=False, username=USERNAME, password=PASSWORD, timeout_secs=1200)\n    services()\n    print('Re-indexing HCO search index')\n    reindex_hco(HOST,PORT,USERNAME,PASSWORD)\n    print('done.')\n"
      }
   ]
}
